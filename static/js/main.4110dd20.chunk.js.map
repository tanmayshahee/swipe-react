{"version":3,"sources":["components/Header.jsx","actionType/index.js","components/Tabs.jsx","action/index.js","components/Card.jsx","components/TodoList.jsx","json/todo.js","json/toread.js","components/ReadCard.jsx","components/ToReadList.jsx","components/DataList.jsx","App.js","reducer/index.js","serviceWorker.js","index.js"],"names":["Header","className","types","ACTIVE_TAB","connect","state","props","activeTab","setActiveTab","payload","type","onTabSelect","id","onClick","Card","data","key","swipeLeft","content","console","log","actionAnimation","ActionAnimations","NONE","action","onSwipeProgress","progress","info","title","subtitle","time","TodoList","map","cardData","todos","toread","num","imgurl","ReadCard","src","alt","ToReadList","App","initialState","todoReducer","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4110dd20.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/header.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className={\"header-main\"}>\r\n      <div className={\"title\"}>Action Items</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const types = {\r\n  ACTIVE_TAB: \"ACTIVE_TAB\",\r\n};\r\n\r\nexport default types;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setActiveTab } from \"../action/index\";\r\nimport \"../styles/tabs.scss\";\r\nconst Tabs = (props) => {\r\n  const onTabSelect = (id) => {\r\n    props.setActiveTab({ activeTab: id });\r\n  };\r\n  return (\r\n    <div className={`tabs-container`}>\r\n      <div\r\n        className={`tab-main ${props.activeTab === \"todo\" ? \"active-tab\" : \"\"}`}\r\n        onClick={() => onTabSelect(\"todo\")}\r\n      >\r\n        To Do\r\n      </div>\r\n      <div\r\n        className={`tab-main ${\r\n          props.activeTab === \"toread\" ? \"active-tab\" : \"\"\r\n        }`}\r\n        onClick={() => onTabSelect(\"toread\")}\r\n      >\r\n        To Read\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    ...props,\r\n    activeTab: state.activeTab,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setActiveTab })(Tabs);\r\n","import types from \"../actionType\";\r\n\r\nexport function setActiveTab(payload) {\r\n  return {\r\n    type: types.ACTIVE_TAB,\r\n    payload,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport \"../styles/card.scss\";\r\nimport {\r\n  SwipeableListItem,\r\n  ActionAnimations,\r\n} from \"@sandstreamdev/react-swipeable-list\";\r\n\r\nconst Card = ({ data }) => {\r\n  const onComplete = (id) => {\r\n    console.log(id);\r\n  };\r\n  return (\r\n    <div className={\"card-main\"} key={data.id}>\r\n      <SwipeableListItem\r\n        swipeLeft={{\r\n          content: <div onClick={() => onComplete(data.id)}>Completed</div>,\r\n          actionAnimation: ActionAnimations.NONE,\r\n          action: () => console.log(data.id),\r\n        }}\r\n        onSwipeProgress={(progress) =>\r\n          console.info(`Swipe progress: ${progress}%`)\r\n        }\r\n      >\r\n        <div className={\"content-main\"}>\r\n          <div className={\"title\"}>{data.title}</div>\r\n          <div className={\"sub-title\"}>{data.subtitle}</div>\r\n          <div className={\"time\"}>{data.time}</div>\r\n        </div>\r\n        <div className={\"swipe-area\"}>\r\n          <div>Swipe left</div>\r\n        </div>\r\n      </SwipeableListItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../styles/todo-list.scss\";\r\nimport { SwipeableList } from \"@sandstreamdev/react-swipeable-list\";\r\nimport \"@sandstreamdev/react-swipeable-list/dist/styles.css\";\r\n\r\nconst TodoList = ({ data }) => {\r\n  const renderCard = (cardData) => {\r\n    return <Card data={cardData} />;\r\n  };\r\n  return (\r\n    <div className=\"todo-list-main\">\r\n      <SwipeableList>{data.map(renderCard)}</SwipeableList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","const todos = [\r\n  {\r\n    id: \"1\",\r\n    title: \"Hair Appointment\",\r\n    subtitle: \"with Dr Shobhita Anand\",\r\n    time: \"Today, 3:30 PM\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    title: \"Eat Tablet Bromide\",\r\n    subtitle: \"Follow up on your regime\",\r\n    time: \"Today, After Lunch\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    title: \"Wash Hair\",\r\n    subtitle: \"Use your shampoo\",\r\n    time: \"Today, Morning Bath\",\r\n  },\r\n  {\r\n    id: \"4\",\r\n    title: \"Moisturize\",\r\n    subtitle: \"Use your mosituriser\",\r\n    time: \"Before Bedtime, 28th June\",\r\n  },\r\n];\r\n\r\nexport default todos;\r\n","const toread = [\r\n  {\r\n    id: \"1\",\r\n    content: \"HAIR CARE 101\",\r\n    num: \"03\",\r\n    imgurl: \"https://homepages.cae.wisc.edu/~ece533/images/pool.png\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    content: \"HOW TO USE NIACHIN\",\r\n    num: \"02\",\r\n    imgurl: \"https://homepages.cae.wisc.edu/~ece533/images/arctichare.png\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    content: \"EFFECTS OF MINOXIDIL\",\r\n    num: \"01\",\r\n    imgurl: \"https://homepages.cae.wisc.edu/~ece533/images/monarch.png\",\r\n  },\r\n];\r\n\r\nexport default toread;\r\n","import React from \"react\";\r\nimport \"../styles/read-card.scss\";\r\nconst ReadCard = ({ data }) => {\r\n  return (\r\n    <div className={\"read-card-main\"}>\r\n      <div className={\"img-wrapper\"}>\r\n        <img src={data.imgurl} alt=\"rocket\" />\r\n      </div>\r\n      <div className={\"content\"}>{data.content}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReadCard;\r\n","import React from \"react\";\r\nimport ReadCard from \"./ReadCard\";\r\nimport \"../styles/toread-list.scss\";\r\nconst ToReadList = ({ data }) => {\r\n  const renderCard = (cardData) => {\r\n    return <ReadCard data={cardData} />;\r\n  };\r\n  return <div className={\"to-read-list-main\"}>{data.map(renderCard)}</div>;\r\n};\r\n\r\nexport default ToReadList;\r\n","import React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport todos from \"../json/todo\";\r\nimport toread from \"../json/toread\";\r\nimport { connect } from \"react-redux\";\r\nimport ToReadList from \"./ToReadList\";\r\n\r\nconst DataList = (props) => {\r\n  return (\r\n    <>\r\n      {props.activeTab === \"todo\" ? (\r\n        <TodoList data={todos} />\r\n      ) : (\r\n        <ToReadList data={toread} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    ...props,\r\n    activeTab: state.activeTab,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(DataList);\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Tabs from \"./components/Tabs\";\nimport DataList from \"./components/DataList\";\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Tabs />\n      <DataList />\n    </>\n  );\n}\n\nexport default App;\n","import types from \"../actionType\";\r\nconst initialState = {\r\n  activeTab: \"todo\",\r\n};\r\nconst todoReducer = function (state = initialState, action) {\r\n  const payload = action.payload;\r\n  switch (action.type) {\r\n    case types.ACTIVE_TAB: {\r\n      return {\r\n        ...state,\r\n        activeTab: payload.activeTab,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport todoReducer from \"./reducer\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(todoReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}